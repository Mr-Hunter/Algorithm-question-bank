

Given a singly linked list where elements are sorted in ascending order, convert it to a height balanced BST.


class Solution {
public:
   TreeNode *sortedListToBST(ListNode *head) {
      // 参数检测：如果链表尾空链表，则二叉树为空
       if(NULL == head)
         return NULL;
      
     return _sortedListToBST(head, NULL);
   }
   
private:
    // 根据二叉树前序遍历规则创建BST
     TreeNode* _sortedListToBST(ListNode *pHead, ListNode* pTail)
     {
         if(pHead == pTail)
             return NULL;
         
         // 因为链表已经排序，题目要求创建的二叉树为平衡二叉树
         // 因此将链表的中间结点作为二叉树的根节点
         ListNode* pMiddle = _FindMiddleNode(pHead, pTail);
         TreeNode* pRoot = new TreeNode(pMiddle->val);
         
         // 用链表中间结点的左半边去递归创建pRoot的左子树
         pRoot->left = _sortedListToBST(pHead, pMiddle);
         
         // 用链表中间结点的左半边去递归创建pRoot的右子树
         pRoot->right = _sortedListToBST(pMiddle->next, pTail);
         
         return pRoot;
     }
     
     // 查找链表的中间结点
     ListNode* _FindMiddleNode(ListNode* pHead, ListNode* pTail)
     {
         ListNode* pFast = pHead;
         ListNode* pSlow = pHead;
         
         while(pFast != pTail && pFast->next != pTail)
         {
             pFast = pFast->next->next;
             pSlow = pSlow->next;
         }
         
         return pSlow;
     }
 };
